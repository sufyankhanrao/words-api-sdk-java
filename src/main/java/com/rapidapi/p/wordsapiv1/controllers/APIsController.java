/*
 * WordsAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.rapidapi.p.wordsapiv1.controllers;

import com.rapidapi.p.wordsapiv1.ApiHelper;
import com.rapidapi.p.wordsapiv1.AuthManager;
import com.rapidapi.p.wordsapiv1.Configuration;
import com.rapidapi.p.wordsapiv1.exceptions.ApiException;
import com.rapidapi.p.wordsapiv1.http.Headers;
import com.rapidapi.p.wordsapiv1.http.client.HttpCallback;
import com.rapidapi.p.wordsapiv1.http.client.HttpClient;
import com.rapidapi.p.wordsapiv1.http.client.HttpContext;
import com.rapidapi.p.wordsapiv1.http.request.HttpRequest;
import com.rapidapi.p.wordsapiv1.http.response.HttpResponse;
import com.rapidapi.p.wordsapiv1.http.response.HttpStringResponse;
import com.rapidapi.p.wordsapiv1.models.DefinitionsResponse;
import com.rapidapi.p.wordsapiv1.models.ExamplesResponse;
import com.rapidapi.p.wordsapiv1.models.FrequencyResponse;
import com.rapidapi.p.wordsapiv1.models.PronunciationResponse;
import com.rapidapi.p.wordsapiv1.models.SynonymsResponse;
import com.rapidapi.p.wordsapiv1.models.WordResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class APIsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public APIsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public APIsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Get synonyms of a word.
     * @param  word  Required parameter: The word to search synonyms for.
     * @return    Returns the SynonymsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SynonymsResponse synonyms(
            final String word) throws ApiException, IOException {
        HttpRequest request = buildSynonymsRequest(word);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSynonymsResponse(context);
    }

    /**
     * Get synonyms of a word.
     * @param  word  Required parameter: The word to search synonyms for.
     * @return    Returns the SynonymsResponse response from the API call
     */
    public CompletableFuture<SynonymsResponse> synonymsAsync(
            final String word) {
        return makeHttpCallAsync(() -> buildSynonymsRequest(word),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleSynonymsResponse(context));
    }

    /**
     * Builds the HttpRequest object for synonyms.
     */
    private HttpRequest buildSynonymsRequest(
            final String word) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/words/{word}/synonyms");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("word",
                new SimpleEntry<Object, Boolean>(word, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for synonyms.
     * @return An object of type SynonymsResponse
     */
    private SynonymsResponse handleSynonymsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SynonymsResponse result = ApiHelper.deserialize(responseBody,
                SynonymsResponse.class);

        return result;
    }

    /**
     * Get definitions of a word, including the part of speech.
     * @param  word  Required parameter: The word to search the definitions for.
     * @return    Returns the DefinitionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DefinitionsResponse definitions(
            final String word) throws ApiException, IOException {
        HttpRequest request = buildDefinitionsRequest(word);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDefinitionsResponse(context);
    }

    /**
     * Get definitions of a word, including the part of speech.
     * @param  word  Required parameter: The word to search the definitions for.
     * @return    Returns the DefinitionsResponse response from the API call
     */
    public CompletableFuture<DefinitionsResponse> definitionsAsync(
            final String word) {
        return makeHttpCallAsync(() -> buildDefinitionsRequest(word),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDefinitionsResponse(context));
    }

    /**
     * Builds the HttpRequest object for definitions.
     */
    private HttpRequest buildDefinitionsRequest(
            final String word) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/words/{word}/definitions");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("word",
                new SimpleEntry<Object, Boolean>(word, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for definitions.
     * @return An object of type DefinitionsResponse
     */
    private DefinitionsResponse handleDefinitionsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        DefinitionsResponse result = ApiHelper.deserialize(responseBody,
                DefinitionsResponse.class);

        return result;
    }

    /**
     * How to pronounce a word, according to the International Phonetic Alphabet. May include
     * multiple results if the word is pronounced differently depending on its part of speech.
     * @param  word  Required parameter: The word to search pronunciation for.
     * @return    Returns the PronunciationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PronunciationResponse pronunciation(
            final String word) throws ApiException, IOException {
        HttpRequest request = buildPronunciationRequest(word);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePronunciationResponse(context);
    }

    /**
     * How to pronounce a word, according to the International Phonetic Alphabet. May include
     * multiple results if the word is pronounced differently depending on its part of speech.
     * @param  word  Required parameter: The word to search pronunciation for.
     * @return    Returns the PronunciationResponse response from the API call
     */
    public CompletableFuture<PronunciationResponse> pronunciationAsync(
            final String word) {
        return makeHttpCallAsync(() -> buildPronunciationRequest(word),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePronunciationResponse(context));
    }

    /**
     * Builds the HttpRequest object for pronunciation.
     */
    private HttpRequest buildPronunciationRequest(
            final String word) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/words/{word}/pronunciation");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("word",
                new SimpleEntry<Object, Boolean>(word, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for pronunciation.
     * @return An object of type PronunciationResponse
     */
    private PronunciationResponse handlePronunciationResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PronunciationResponse result = ApiHelper.deserialize(responseBody,
                PronunciationResponse.class);

        return result;
    }

    /**
     * Retrieve information about a word. Results can include definitions, part of speech, synonyms,
     * related words, syllables, and pronunciation. This method is useful to see which relationships
     * are attached to which definition and part of speech of a word.
     * @param  word  Required parameter: This is a template parameter that is used to provide the
     *         word, about which the information is being fetched.
     * @return    Returns the WordResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public WordResponse word(
            final String word) throws ApiException, IOException {
        HttpRequest request = buildWordRequest(word);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleWordResponse(context);
    }

    /**
     * Retrieve information about a word. Results can include definitions, part of speech, synonyms,
     * related words, syllables, and pronunciation. This method is useful to see which relationships
     * are attached to which definition and part of speech of a word.
     * @param  word  Required parameter: This is a template parameter that is used to provide the
     *         word, about which the information is being fetched.
     * @return    Returns the WordResponse response from the API call
     */
    public CompletableFuture<WordResponse> wordAsync(
            final String word) {
        return makeHttpCallAsync(() -> buildWordRequest(word),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleWordResponse(context));
    }

    /**
     * Builds the HttpRequest object for word.
     */
    private HttpRequest buildWordRequest(
            final String word) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/words/{word}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("word",
                new SimpleEntry<Object, Boolean>(word, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for word.
     * @return An object of type WordResponse
     */
    private WordResponse handleWordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        WordResponse result = ApiHelper.deserialize(responseBody,
                WordResponse.class);

        return result;
    }

    /**
     * Get examples of how the word is used.
     * @param  word  Required parameter: The word to search the examples for.
     * @return    Returns the ExamplesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ExamplesResponse examples(
            final String word) throws ApiException, IOException {
        HttpRequest request = buildExamplesRequest(word);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleExamplesResponse(context);
    }

    /**
     * Get examples of how the word is used.
     * @param  word  Required parameter: The word to search the examples for.
     * @return    Returns the ExamplesResponse response from the API call
     */
    public CompletableFuture<ExamplesResponse> examplesAsync(
            final String word) {
        return makeHttpCallAsync(() -> buildExamplesRequest(word),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleExamplesResponse(context));
    }

    /**
     * Builds the HttpRequest object for examples.
     */
    private HttpRequest buildExamplesRequest(
            final String word) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/words/{word}/examples");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("word",
                new SimpleEntry<Object, Boolean>(word, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for examples.
     * @return An object of type ExamplesResponse
     */
    private ExamplesResponse handleExamplesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ExamplesResponse result = ApiHelper.deserialize(responseBody,
                ExamplesResponse.class);

        return result;
    }

    /**
     * Expands upon the frequency score returned by the main /words/{word} endpoint. Returns zipf, a
     * score indicating how common the word is in the English language, with a range of 1 to 7; per
     * Million, the number of times the word is likely to appear in a corpus of one million English
     * words; and diversity, a 0-1 scale the shows the likelihood of the word appearing in an
     * English document that is part of a corpus.
     * @param  word  Required parameter: The word to search frequency for.
     * @return    Returns the FrequencyResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public FrequencyResponse frequency(
            final String word) throws ApiException, IOException {
        HttpRequest request = buildFrequencyRequest(word);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleFrequencyResponse(context);
    }

    /**
     * Expands upon the frequency score returned by the main /words/{word} endpoint. Returns zipf, a
     * score indicating how common the word is in the English language, with a range of 1 to 7; per
     * Million, the number of times the word is likely to appear in a corpus of one million English
     * words; and diversity, a 0-1 scale the shows the likelihood of the word appearing in an
     * English document that is part of a corpus.
     * @param  word  Required parameter: The word to search frequency for.
     * @return    Returns the FrequencyResponse response from the API call
     */
    public CompletableFuture<FrequencyResponse> frequencyAsync(
            final String word) {
        return makeHttpCallAsync(() -> buildFrequencyRequest(word),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleFrequencyResponse(context));
    }

    /**
     * Builds the HttpRequest object for frequency.
     */
    private HttpRequest buildFrequencyRequest(
            final String word) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/words/{word}/frequency");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("word",
                new SimpleEntry<Object, Boolean>(word, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for frequency.
     * @return An object of type FrequencyResponse
     */
    private FrequencyResponse handleFrequencyResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        FrequencyResponse result = ApiHelper.deserialize(responseBody,
                FrequencyResponse.class);

        return result;
    }

}